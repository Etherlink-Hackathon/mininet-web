name: MeshPay Smart Contracts CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FOUNDRY_PROFILE: default

jobs:
  check:
    strategy:
      fail-fast: true

    name: Foundry project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Show Foundry config
        run: forge config
        working-directory: ./smart-contract

      - name: Run Forge build
        run: |
          forge --version
          forge build --sizes
        id: build
        working-directory: ./smart-contract

      - name: Run Forge tests
        run: |
          forge test -vvv --gas-report
        id: test
        working-directory: ./smart-contract

      - name: Run Forge snapshot
        run: forge snapshot --check --tolerance 5
        id: snapshot
        working-directory: ./smart-contract

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Solhint
        run: npm install -g solhint

      - name: Run Solhint
        run: solhint 'contracts/**/*.sol'
        working-directory: ./smart-contract

      - name: Check formatting
        run: forge fmt --check
        working-directory: ./smart-contract

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Slither
        run: |
          pip install slither-analyzer
          pip install solc-select
          solc-select install 0.8.24
          solc-select use 0.8.24

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run Slither
        run: |
          forge build --build-info
          slither . --print human-summary
        working-directory: ./smart-contract
        continue-on-error: true

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run coverage
        run: |
          forge coverage --report summary --report lcov
        working-directory: ./smart-contract

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./smart-contract/lcov.info
          flags: smart-contracts
          name: smart-contracts-coverage

  deploy-testnet:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [check, lint, security]
    runs-on: ubuntu-latest
    environment: testnet
    steps:
      - uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Deploy to Etherlink Testnet
        run: |
          forge script script/Deploy.s.sol:Deploy --rpc-url ${{ secrets.ETHERLINK_TESTNET_RPC_URL }} --private-key ${{ secrets.DEPLOYER_PRIVATE_KEY }} --broadcast --verify --etherscan-api-key ${{ secrets.ETHERSCAN_API_KEY }}
        working-directory: ./smart-contract
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

  deploy-mainnet:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [check, lint, security]
    runs-on: ubuntu-latest
    environment: mainnet
    steps:
      - uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Deploy to Etherlink Mainnet
        run: |
          forge script script/Deploy.s.sol:Deploy --rpc-url ${{ secrets.ETHERLINK_MAINNET_RPC_URL }} --private-key ${{ secrets.DEPLOYER_PRIVATE_KEY }} --broadcast --verify --etherscan-api-key ${{ secrets.ETHERSCAN_API_KEY }}
        working-directory: ./smart-contract
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          MAINNET_DEPLOYMENT_CONFIRMED: true 